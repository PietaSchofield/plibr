Tumor_Sample_Barcode~Hugo_Symbol+Variant_Classification,
value.var="Variant_Type",
fun.agg=length)
rownames(mutWide) <- mutWide[,1]
mutWide <- mutWide[,-1]
etvCols <- grep("ETV1",colnames(mutWide))
mutETV1 <- mutWide[which(rownames(mutWide)%in%hiETV1),]
mutHighETV1 <- as.data.frame(colSums(mutETV1)[which(colSums(mutETV1)>0)])
colnames(mutHighETV1) <- c("HighETV1")
mutHighETV1$GeneID <- rownames(mutHighETV1)
kable(head(mutHighETV1[order(mutHighETV1$HighETV1,decreasing=T),c(2,1)],10),row.names=F,
caption="Common mutations in Overexpressed ETV1 samples")
mutETV1 <- mutWide[which(rownames(mutWide)%in%loETV1),]
mutLowETV1 <- as.data.frame(colSums(mutETV1)[which(colSums(mutETV1)>0)])
colnames(mutLowETV1) <- c("LowETV1")
mutLowETV1$GeneID <- rownames(mutLowETV1)
kable(head(mutLowETV1[order(mutLowETV1$LowETV1,decreasing=T),c(2,1)],10),row.names=F,
caption="Common mutations in Normal expression ETV1 samples")
comp <- merge(mutLowETV1,mutHighETV1,by="GeneID")
comp$FET <- unlist(apply(comp,1,function(r){
fisher.test(matrix(as.numeric(c(r["LowETV1"],r["HighETV1"],length(loETV1),length(hiETV1))),
nrow=2))$p.value
}))
comp$FDR <- p.adjust(comp$FET)
comphi <- comp[which(comp$FET<=0.01),]
kable(comphi[order(comphi$FET),])
expData <- prad.rnaseq[,grep("[.]01",colnames(prad.rnaseq))]
dgeExp <- DGEList(expData)
dgeExp <- calcNormFactors(dgeExp)
etvVals <- cpm(dgeExp,log=T)[grep("ETV1",rownames(cpm(dgeExp))),]
ergVals <- cpm(dgeExp,log=T)[grep("^ERG$",rownames(cpm(dgeExp))),]
hiETV1 <- names(which(etvVals>6))
hiERG <- names(which(ergVals>=5))
exETV1 <-which(hiETV1%in%hiERG)
exERG <- which(hiERG%in%hiETV1)
hiETV1 <- hiETV1[-exETV1]
hiERG <- hiERG[-exERG]
sampleData <- rbind(cbind(sampleID=hiERG,Condition="ERG"),
cbind(sampleID=hiETV1,Condition="ETV1"))
rownames(sampleData) <- sampleData[,1]
sampleData <- as.data.frame(sampleData[,-1])
colnames(sampleData) <- "Condition"
colnames(expData)
identical(colnames(expData[,which(colnames(expData)%in%rownames(sampleData))]),rownames(sampleData))
exprData <- expData[,which(colnames(expData)%in%rownames(sampleData))]
identical(colnames(expData[,match(rownames(sampleData),colnames(expData))]),rownames(sampleData))
dgeEvE<- DGEList(expData[,match(rownames(sampleData),colnames(expData))],samples=sampleData)
dgeEvE <- calcNormFactors(dgeEvE)
modMat <- model.matrix(~Condition-1,data=dgeEvE$samples)
colnames(modMat) <- gsub("Condition","",colnames(modMat))
dgeEvE <- estimateDisp(dgeEvE,modMat)
fit <- glmQLFit(dgeEvE,modMat)
qlt <- glmQLFTest(fit,contrast=c(1,-1))
.fileName <- "201711"
.projName <- "etb1_vu"
plib::rcur(fileName=.fileName,projDir=.projName,open="html",upload=T)
plib::rcur(fileName="201806",projDir="notes_ps",open="html")
"run_run*/filtered_match/*/human_better.bam"))
"run_run*/filtered_match/*/human_better.bam"),host="feenix")
"/run_run*/filtered_match/*/human_better.bam"),host="feenix")
files
filesDb
base::source("/var/folders/by/fg39gx653kn67btpb9vw190r0000gq/T/Nvim-R-pschofield/Rsource-43619", print.eval=TRUE)
write.csv(filesDb,file=file.path(.localData,"bams_exr5.csv"))
nrow(filesDb)
require(Rsubread)
help(featureCounts)
files <- rlsFiles(paste0("/scratch/wsspaces/pschofield-itchy_n-0/hmf-rna",
"/res_run*/filtered_match/*/human_better.bam"),host="feenix")
filesDb <- plyr::ldply(strsplit(files,"/"))
rownames(filesDb) <- files
write.delim(filesDb,file=file.path(.localData,"bams_exr5.csv"),sep="\t")
write.table(filesDb,file=file.path(.localData,"bams_exr5.csv"),sep="\t")
write.delim(filesDb,file=file.path(.localData,"bams_exr5.csv"),sep="\t",quote=F)
write.table(filesDb,file=file.path(.localData,"bams_exr5.csv"),sep="\t",quote=F)
plib::rb()
:ls
seqruns
seqruns <- read.csv(file.path(.localData,"runsdirs.csv"),stringsAsFactors=F)
seqruns$RUNID <- basename(dirname(seqruns$dir))
colnames(details) <- c("MCBFID","SAMPLENO","CDXID","CEPCDX","CEPID","SAMPLEID","SEQRUN")
details$FILE <- ofiles
details <- merge(details,seqruns[,c(1,3,4)],by.x=c("MCBFID","SEQRUN"),by.y=c("Libid","id"))
write.csv(details,file=file.path(.localData,"Sample_breakdown.csv"),row.names=F)
sampleInfo <- read.csv(file=file.path(.localData,"Sample_breakdown.csv"))
resAll <- lapply(sampleInfo$FILE,readFC)
dim(resAll)
countsAll <- do.call(cbind,lapply(resAll,"[[","counts"))
dim(countsAll)
summaryAll <- do.call(cbind,lapply(resAll,"[[","summary"))
head(summaryAll)
colnames(countsAll) <- gsub("(^X.*match[.]|[.]human.*$)","",colnames(countsALl))
colnames(countsAll) <- gsub("(^X.*match[.]|[.]human.*$)","",colnames(countsAll))
colnames(countsAll) <- gsub("[.]","_",colnames(countsAll))
summaryAll <- do.call(cbind,lapply(resAll,function(x) x$summary[,1]))
dim(summaryAll)
rownames(summaryAll) <- resAll[[1]]$summary$status
rownames(summaryAll)
colnames(countsAll)
resAll[[1]]$summary
resAll[[1]]$summary[,2]
summaryAll <- do.call(cbind,lapply(resAll,function(x) x$summary[,2]))
colnames(summaryAll) <- colnames(countsAll)
rownames(summaryAll) <- resAll[[1]]$summary$Status
summaryAll
summaryMelt <- reshape2::melt(summaryAll)
require(ggplot)
ggplot(summaryMelt) + geom_barplot(x=Var2,y=value,fill=Var1)
ggplot(summaryMelt) + geom_bar(x=Var2,y=value,fill=Var1)
ggplot(summaryMelt) + geom_bar(aes(x=Var2,y=value,fill=Var1))
require(reshape2)
require(ggplot2)
summaryPerc <- 100*t(t(summaryAll)/colSums(summaryAll))
summaryMelt <- reshape2::melt(summaryPerc)
head(summaryMelt)
summaryMelt <- summaryMelt[which(summaryMelt$value>0),]
ggplot(summaryMelt) + geom_boxplot(aes(x=Var2,y=value,fill=Var1))
ggplot(summaryMelt) + geom_boxplot(aes(x=Var2,y=value,fill=Var1)) + flip_coords()
ggplot(summaryMelt) + geom_boxplot(aes(x=Var2,y=value,fill=Var1)) + flip_coord()
ggplot(summaryMelt) + geom_boxplot(aes(x=Var2,y=value,fill=Var1)) + flip_axis()
help(ggplot)
ggplot(summaryMelt) + geom_boxplot(aes(x=Var2,y=value,fill=Var1)) + coord_flip()
ggplot(summaryMelt) + geom_boxplot(aes(x=Var2,y=value,fill=Var1)) + facet_grid(.~Var1)  +coord_flip()
countMelt <- melt(countsAll)
head(countsAll)
countsAll$GeneID <- rownames(countsAll)
countMelt <- melt(countsAll,"GeneID")
head(countsMelt)
head(countMelt)
countCast <- dcast(countMelt,GeneID~variable,fun=sum)
colnames(countCast)
libraryMelt <- reshape2::melt(summaryAll)
head(libraryMelt)
require(edgeR)
rownames(countCast) <- countCast[,1]
countCast <- countCast[,-1]
dim(countCast)
rownames(libsize) <- libsize[,1]
libsize <- libsize[,-1]
libsize <- dcast(libraryMelt,Var2~.,fun=sum)
libnames <- libsize[,1]
libsize <- as.data.frame(libsize[,-1])
rownames(libsize) <- libnames
libsize
dim(genes)
genes <- genes$length
genes <- genes$Length
head(genes)
summary(genelength)
summary(genelen)
17436 - 17369
identical(rownames(libsize),colnames(countCast))
genelen <- genelen[match(rownames(countCast),rownames(genelen)),]
genes <- resAll[[1]]$annotation
genenames <- rownames(genes)
genelen <- as.data.frame(genes$Length)
rownames(genelen) <- genenames
identical(rownames(genelen),rownames(countCast))
head(countCast[,1:2])
genelen <- genelen[order(rownames(genelen)),]
genelen <- genes$Length
names(genelen) <- genenames
genelen <- genelen[order(names(genelen))]
genelen <- as.data.frame(genelen[order(names(genelen))])
head(genelen)
colnames(genelen) <- "length"
dge <- DGEList(countCast,lib.size=libsize[,1],genes=genelen)
dge
head(rpkm(dge))
hcl <- hcl(rplm(dge))
hcl <- hcl(rpkm(dge))
hcl <- hclust(rpkm(dge))
hcl <- hclust(as.dist(1-cor(rpkm(dge)))
)
dge <- calcNormFactors(dge)
hcl <- hclust(dist(t(rpkm(dge),"canberra")))
hcl <- hclust(dist(t(rpkm(dge),method="canberra")))
dataObjectFile <- file.path(.localData,"TheBigDataFile.Rdata")
save(dge,summaryAll,countsAll,file=dataObjectFile)
load(dataObjectFile)
plot(hcl)
sampleInfo$COMMONID <- gsub("_res_.*$","",basename(sampleInfo$FILE))
base::source("/var/folders/by/fg39gx653kn67btpb9vw190r0000gq/T/Nvim-R-pschofield/Rsource-546", print.eval=TRUE)
sampleInfo <- read.csv(file=file.path(.localData,"Sample_breakdown.csv"),stringsAsFactors=F)
sampleInfo
table(sampleInfo$COMMONID)
table(sampleInfo$CEPID)
length(table(sampleInfo$CEPID))
length(table(sampleInfo$COMMONID))
load(file.path(.localData,"counts","P3_all_rpkms.Rdata"))
ls()
dim(All_counts)
dim(cpm(dge))
colnames(All_counts)
colnames(cpm(dge))
head(rownames(All_counts))
head(rownames(cpm(dge)))
head(rownames(garimaCounts))
help(counts)
lapply(colnames(garimaCounts),function(cn){
cor(garimaCounts[,cn],cpm(dge,normalized=F)[,grep(cn,colnames(cpm(dge)))])
resCor <- lapply(colnames(garimaCounts),function(cn){
cor(garimaCounts[,cn],cpm(dge,normalized=T)[,grep(cn,colnames(cpm(dge)))])
as.data.frame(resCor)
as.data.frame(t(resCor))
resCor
unlist(resCor)
dge <- calcNormFactors(dge,method="none")
hcl <- hclust(as.dist(1-cor(rpkm(dge))))
hcl <- hclust(dist(t(rpkm(dge)),method="canberra"))
plot(hcl,cex=0.5)
load(file.path(.localData,"counts","P3_all_counts.Rdata"))
garimaCounts <- All_counts[order(rownames(All_counts)),]
load(file.path(.localData,"counts","P3_all_rpkm.Rdata"))
garimaRPKMs <- All_rpkm[order(rownames(All_rpkm)),]
cor(garimaCounts[,cn],cpm(dge,normalized=T)[,grep(paste0("_",cn,"_"),colnames(cpm(dge)))])
resCor <- sapply(colnames(garimaCounts),function(cn){
names(resCor) <- colnames(garimaCounts)
as.data.frame(unlist(resCor))
names(resCorR) <- colnames(garimaRPKMs)
cor(garimaRPKMs[,cn],rpkm(dge)[,grep(paste0("_",cn,"_"),colnames(cpm(dge)))])
resCorR <- sapply(colnames(garimaRPKMs),function(cn){
colnames(garimaRPKMs)
cor(garimaRPKMs[,cn],rpkm(dge)[,grep(paste0("_",cn,"_"),colnames(rpkm(dge)))])
as.data.frame(unlist(resCorR))
nrow(as.data.frame(unlist(resCorR)))
168/4
72/4
72/8
168/8
144/8
88/8
table(sampleInfo$MCBFID)
help(rpkm)
res <- merge(as.data.frame(unlist(resCorR)),as.data.frame(unlist(resCorR)),by="row.names")
resCorC <- sapply(colnames(garimaCounts),function(cn){
cor(garimaCounts[,cn],cpm(dge,normalized=F)[,grep(paste0("_",cn,"_"),colnames(cpm(dge)))])
names(resCorC) <- colnames(garimaCounts)
resCorR <- sapply(colnames(garimaRPKMs)[-c(1:2)],function(cn){
cor(garimaRPKMs[,cn],rpkm(dge,"length")[,grep(paste0("_",cn,"_"),colnames(rpkm(dge)))])
})
names(resCorR) <- colnames(garimaRPKMs)[-c(1:2)]
res <- merge(as.data.frame(unlist(resCorC)),as.data.frame(unlist(resCorR)),by="row.names")
colnames(res) <- c("Sample_ID","Counts","RPKMs")
kable(res)
plib::rcur(fileName="201806",projDir="cephmf_kf",open="html")
res[,2:3]
summary(res[,2:3])
plib::autoCommit()
q()
